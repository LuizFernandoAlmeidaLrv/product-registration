/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.martinello.cadastro.componentes.consulta;

import br.com.martinello.cadastro.view.consultas.TelaConsultaProdutosModal;
import br.com.martinello.matriz.bd.control.ProdutoControl;
import br.com.martinello.matriz.bd.model.domain.Produto;
import br.com.martinello.matriz.bd.util.CampoConsultaEvento;
import br.com.martinello.matriz.bd.util.CampoConsultaListener;
import br.com.martinello.matriz.componentesbasicos.Campo;
import br.com.martinello.matriz.componentesbasicos.CampoConsultaPadrao;
import br.com.martinello.matriz.componentesbasicos.CampoString;
import br.com.martinello.matriz.componentesbasicos.ConstantesGlobais;
import br.com.martinello.matriz.componentesbasicos.Rotulo;
import br.com.martinello.matriz.componentesbasicos.paineis.Painel;
import br.com.martinello.matriz.componentesbasicos.paineis.TelaProcessamento;
import com.sun.glass.events.KeyEvent;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import javax.swing.SwingUtilities;

/**
 *
 * @author Sidnei
 */
public class CampoConsultaProduto extends Painel implements ActionListener, FocusListener, Campo {

    protected Produto produtoNew, produtoOld, produto;
    protected String valorOld = "", valorNew = "", valor = "";
    protected Rotulo rDescricaoProduto;
    protected CampoString csDescricaoProduto;
    protected Collection<CampoConsultaListener> campoConsultaListeners = new ArrayList<>();
    protected boolean obrigatorio = true;
    protected String origem = "T";
    protected String filtroSituacao = "N";
    protected String descricaoRotulo;
    protected Rotulo rRotulo;
    protected boolean permiteAlterarSituacao, permiteAlterarTipoEstoque;
    protected ProdutoControl produtoControl;

    /**
     * Creates new form CampoStringConsulta
     */
    public CampoConsultaProduto() {
        initComponents();

        //addFocusListener(this);
        ccpProduto.getbConsultar().addActionListener(this);
        ccpProduto.addFocusListener(this);

        SwingUtilities.invokeLater(() -> {
//            if (rotulo != null) {
//                setJlDescricao(rotulo);
//            }
//
//            if (csDescricao != null) {
//                setCsDescricao(csDescricao);
//            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clsTipoFiltro = new br.com.martinello.matriz.componentesbasicos.CampoListaSimples();
        ccpProduto = new br.com.martinello.matriz.componentesbasicos.CampoConsultaPadrao();

        setLayout(new java.awt.BorderLayout());

        clsTipoFiltro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Descrição", "Código" }));
        clsTipoFiltro.setSelectedIndex(1);
        clsTipoFiltro.setMaximumSize(new java.awt.Dimension(72, 20));
        clsTipoFiltro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                clsTipoFiltroItemStateChanged(evt);
            }
        });
        add(clsTipoFiltro, java.awt.BorderLayout.LINE_START);

        ccpProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ccpProdutoKeyPressed(evt);
            }
        });
        add(ccpProduto, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void clsTipoFiltroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_clsTipoFiltroItemStateChanged
        //cccCpfCnj.setTipo(clsTipoFiltro.getSelectedItem().toString());
    }//GEN-LAST:event_clsTipoFiltroItemStateChanged

    private void ccpProdutoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ccpProdutoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F6) {
            abreTelaConsulta(null);
        }
    }//GEN-LAST:event_ccpProdutoKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private br.com.martinello.matriz.componentesbasicos.CampoConsultaPadrao ccpProduto;
    private br.com.martinello.matriz.componentesbasicos.CampoListaSimples clsTipoFiltro;
    // End of variables declaration//GEN-END:variables

    public String getFiltro() {
        String filtroDescricao = "";
//        if (ValidacaoCpfCnpj.removeMascara(cccCpfCnj.getText().trim()).length() > 0) {
//            return cccCpfCnj.getText().trim();
//        }

        return filtroDescricao;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
       abreTelaConsulta(null);
    }

    public Produto getProduto() {
        return produto;
    }

    public void setProduto(Produto produto) {
        this.produto = produto;
        if (produto != null) {
            valorOld = valorNew;

            ccpProduto.setString(produto.getCodigo());

            valorNew = produto.getCodigo();

            if (rDescricaoProduto != null) {
                rDescricaoProduto.setText(produto.getDescricao());
            }
            if (csDescricaoProduto != null) {
                csDescricaoProduto.setString(produto.getDescricao());
                csDescricaoProduto.setEditable(false);
            }

            disparaValorSelecionado();
        } else {
            if (rDescricaoProduto != null) {
                rDescricaoProduto.setText("");
            }
            if (csDescricaoProduto != null) {
                csDescricaoProduto.setString("");
                csDescricaoProduto.setEditable(true);
            }

            disparaValorSelecionado();
        }
    }

    public CampoConsultaPadrao getCcpProduto() {
        return ccpProduto;
    }

    public void setCcpProduto(CampoConsultaPadrao ccpProduto) {
        this.ccpProduto = ccpProduto;
    }

    public List<Produto> pesquisar(String campoFiltro, String filtro) {
        if (produtoControl == null) {
            produtoControl = new ProdutoControl();
        }
        List<Produto> lProdutos = new LinkedList<>();

        return lProdutos;

    }

    @Override
    public void focusGained(FocusEvent e) {
        ccpProduto.selectAll();
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (ccpProduto.getString().length() > 0 && !valorNew.equals(ccpProduto.getString())) {

            final TelaProcessamento telaProcessamento = new TelaProcessamento("Realizando consulta...");

            new Thread() {
                @Override
                public void run() {
                    List<Produto> lProdutos = pesquisar(clsTipoFiltro.getString(), ccpProduto.getString());

                    if (lProdutos.size() == 1) {
                        setProduto(lProdutos.get(0));
                    } else {
                        setProduto(null);
                        abreTelaConsulta(lProdutos);
                    }

                    SwingUtilities.invokeLater(() -> {
                        telaProcessamento.dispose();
                    });

                }
            }.start();

            telaProcessamento.setVisible(true);
            telaProcessamento.requestFocusInWindow();

        } else if (ccpProduto.getString().length() == 0 && !valorNew.equals("")) {
            setProduto(null);
        }
    }

    private void abreTelaConsulta(List<Produto> lProdutos) {
        java.awt.EventQueue.invokeLater(() -> {
            TelaConsultaProdutosModal telaConsultaProduto = new TelaConsultaProdutosModal(new javax.swing.JFrame(), true, this, lProdutos);
            telaConsultaProduto.setSize(1150, 700);
            telaConsultaProduto.setLocationRelativeTo(null);

            if (clsTipoFiltro.getString().equals("Descrição")) {
                telaConsultaProduto.getPainelProduto().getCsFiltroDescricao().getClsTipoFiltro().setString("Contendo");
                telaConsultaProduto.getPainelProduto().getCsFiltroDescricao().getCsFiltroString().setString(ccpProduto.getString());
            } else if (clsTipoFiltro.getString().equals("Código")) {
                telaConsultaProduto.getPainelProduto().getCsFiltroCodigo().setString(ccpProduto.getString());
            }

            telaConsultaProduto.getPainelProduto().setPermiteAlterarSituacao(permiteAlterarSituacao);
               telaConsultaProduto.getPainelProduto().setOrigem(origem.toString());
            if (filtroSituacao.equalsIgnoreCase("Incluir")) {
                telaConsultaProduto.getPainelProduto().setaIncluir();
            } else {
                telaConsultaProduto.getPainelProduto().setaConsuta();
            }

            telaConsultaProduto.getPainelProduto().setaFocoTabelaConsulta();

            telaConsultaProduto.setVisible(true);

        });
    }

    public Rotulo getRotuloCampo() {
        return rRotulo;
    }

    @Override
    public Rotulo getComponenteRotulo() {
        return rRotulo;
    }

    @Override
    public void setComponenteRotulo(Rotulo rRotulo) {
        this.rRotulo = rRotulo;

        atualizaDescricaoRotulo();
    }

    public Rotulo getrDescricaoProduto() {
        return rDescricaoProduto;
    }

    public void setrDescricaoProduto(Rotulo rDescricaoProduto) {
        this.rDescricaoProduto = rDescricaoProduto;
    }

    public CampoString getCsDescricaoProduto() {
        return csDescricaoProduto;
    }

    public void setCsDescricaoProduto(CampoString csDescricaoProduto) {
        this.csDescricaoProduto = csDescricaoProduto;
    }

    public synchronized void addCampoConsultaListener(CampoConsultaListener l) {
        if (!campoConsultaListeners.contains(l)) {
            campoConsultaListeners.add(l);
        }
    }

    public synchronized void removeCampoConsultaListener(CampoConsultaListener l) {
        campoConsultaListeners.remove(l);
    }

    private void disparaValorSelecionado() {
        Collection<CampoConsultaListener> tl;

        synchronized (this) {
            tl = (Collection) (((ArrayList) campoConsultaListeners).clone());
        }

        CampoConsultaEvento evento = new CampoConsultaEvento(this);

        tl.forEach((t) -> {
            t.valorSelecionado(evento);
        });
    }

    @Override
    public void limpar() {
        this.valorOld = valorNew;
        this.valorNew = "";
        setProduto(null);
        ccpProduto.limpar();
    }

    @Override
    public boolean eValido() {
        return true;
    }

    @Override
    public boolean eVazio() {
        if (obrigatorio) {
            if (produto != null) {
                ccpProduto.setBorder(ccpProduto.getBordaOriginal());
                return false;
            } else {
                ccpProduto.setBorder(ConstantesGlobais.BORDA_ERRO);
                return true;
            }
        }
        return false;
    }

    @Override
    public String getDica() {
        return "";
    }

    @Override
    public String getDescricaoRotulo() {
        return descricaoRotulo;
    }

    @Override
    public void setDescricaoRotulo(String descricaoRotulo) {
        this.descricaoRotulo = descricaoRotulo;
    }

    @Override
    public boolean isObrigatorio() {
        return obrigatorio;
    }

    @Override
    public void setObrigatorio(boolean obrigatorio) {
        this.obrigatorio = obrigatorio;
    }

    public void atualizaDescricaoRotulo() {
        if (rRotulo != null) {
            SwingUtilities.invokeLater(() -> {
                if (obrigatorio) {
                    rRotulo.setText("<html><body>" + descricaoRotulo + "<FONT COLOR='red'><b>*</b></FONT>:</body></html>");
                } else {
                    rRotulo.setText("<html><body>" + descricaoRotulo + ":</body></html>");
                }
            });
        }
    }

    public String getOrigem() {
        return origem;
    }

    public void setOrigem(String origem) {
        this.origem = origem;
    }

    public boolean isPermiteAlterarSituacao() {
        return permiteAlterarSituacao;
    }

    public void setPermiteAlterarSituacao(boolean permiteAlterarSituacao) {
        this.permiteAlterarSituacao = permiteAlterarSituacao;
    }

    public boolean isPermiteAlterarTipoEstoque() {
        return permiteAlterarTipoEstoque;
    }

    public void setPermiteAlterarTipoEstoque(boolean permiteAlterarTipoEstoque) {
        this.permiteAlterarTipoEstoque = permiteAlterarTipoEstoque;
    }

    public String getFiltroSituacao() {
        return filtroSituacao;
    }

    public void setFiltroSituacao(String filtroSituacao) {
        this.filtroSituacao = filtroSituacao;
    }

    @Override
    public void setEnabled(boolean habilitado) {
        clsTipoFiltro.setEnabled(habilitado);
        ccpProduto.setEnabled(habilitado);
    }

    @Override

    public void grabFocus() {
        ccpProduto.grabFocus();
    }
}
