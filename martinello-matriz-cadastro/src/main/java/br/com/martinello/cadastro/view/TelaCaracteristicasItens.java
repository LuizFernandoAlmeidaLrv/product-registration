/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.martinello.cadastro.view;

import br.com.martinello.matriz.bd.control.CaracteristicaControl;
import br.com.martinello.matriz.bd.control.CaracteristicaItemControl;
import br.com.martinello.matriz.bd.control.SubCategoriaControl;
import br.com.martinello.matriz.bd.model.domain.Caracteristica;
import br.com.martinello.matriz.bd.model.domain.CaracteristicaItem;
import br.com.martinello.matriz.bd.model.domain.Categoria;
import br.com.martinello.matriz.bd.model.domain.SubCategoria;
import br.com.martinello.matriz.componentesbasicos.CampoListaSimples;
import br.com.martinello.matriz.componentesbasicos.paineis.JPStatus;
import br.com.martinello.matriz.componentesbasicos.view.TelaPadrao;
import br.com.martinello.matriz.util.excessoes.ErroSistemaException;
import com.towel.swing.table.ObjectTableModel;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;


/**
 *
 * @author luiz.almeida
 */
public class TelaCaracteristicasItens extends TelaPadrao {

    /**
     * Creates new form TelaCategoria
     */
    private SubCategoria subCategoria;
    private Categoria categoria;
    private Caracteristica filtroCaract;
    private Caracteristica caracteristica;
    private CaracteristicaItem filtroCaractItem;
    private CaracteristicaItem caracteristicaItem;
    private CaracteristicaItem caracteristicaItemAdd;
    private CaracteristicaItemControl caracItemControl;
    private CaracteristicaControl caracteristicaControl;
    private SubCategoriaControl subCategoriaControl;
    private static List<Categoria> lCategoria;
    private static List<SubCategoria> lSubCategoria;
    private List<Caracteristica> lCaracteristicas;
    private List<CaracteristicaItem> lCaracteristicasItem;
    private static List<CaracteristicaItem> lCaracteristicasItemAdd = new ArrayList<>();
    private static int seqCarItem = 0;
    private boolean resultado;
    private int idCategoria;
    private CampoListaSimples item;
    private static String catSelect;
    private String cat;
    private String codigo;
     private String codigo2;
    private String salvarAlterar = "Salvar";
    private final ObjectTableModel<CaracteristicaItem> otmCaracteristicaItem
            = new ObjectTableModel<>(CaracteristicaItem.class, "subCategoria,caracteristica,idCaracteristicaItem,caracteristicaItem,seqCatIte,situacao,visivel,observacao,idUsuario,nomeUsuario,dataCadastro");

    private final ObjectTableModel<CaracteristicaItem> otmCaracteristicaItemAdd
            = new ObjectTableModel<>(CaracteristicaItem.class, "subCategoria,caracteristica,caracteristicaItem,seqCatIte,situacao,visivel,observacao,");

    public TelaCaracteristicasItens() {
        initComponents();
        carregarSubCategoria("Consulta");
        //   carregarCaracteristica("Consulta");
        //carregarCategoria();
        ppCadCaracteristica.setVisible(false);
        paCaracteristica.setEnabledAt(1, false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpsCaracteristica = new br.com.martinello.matriz.componentesbasicos.paineis.JPStatus();
        paCaracteristica = new br.com.martinello.matriz.componentesbasicos.paineis.PainelAba();
        ppConsultaCaracteristica = new br.com.martinello.matriz.componentesbasicos.paineis.PainelPadrao();
        ppTabConsultaCaract = new br.com.martinello.matriz.componentesbasicos.paineis.PainelPadrao();
        jspTabConsultaCaract = new javax.swing.JScrollPane();
        tpConsultaCaract = new br.com.martinello.matriz.componentesbasicos.TabelaPadrao();
        ppFiltroConsultaCaract = new br.com.martinello.matriz.componentesbasicos.paineis.PainelPadrao();
        rFiltroDescCaract = new br.com.martinello.matriz.componentesbasicos.Rotulo();
        cscFiltroDescCaract = new br.com.martinello.matriz.componentesbasicos.consulta.CampoStringConsulta();
        rFiltroStatusCaract = new br.com.martinello.matriz.componentesbasicos.Rotulo();
        jrbFiltroAtivoCaract = new javax.swing.JRadioButton();
        jrbFiltroInativoCaract = new javax.swing.JRadioButton();
        btFiltroPesquisar = new br.com.martinello.matriz.componentesbasicos.Botao();
        btFiltroAlterar = new br.com.martinello.matriz.componentesbasicos.Botao();
        btFiltroCadastrar = new br.com.martinello.matriz.componentesbasicos.Botao();
        btFiltroExcluir = new br.com.martinello.matriz.componentesbasicos.Botao();
        rFiltroSubCategoria = new br.com.martinello.matriz.componentesbasicos.Rotulo();
        rCatFiltro = new br.com.martinello.matriz.componentesbasicos.Rotulo();
        clsFiltroSubCat = new br.com.martinello.matriz.componentesbasicos.CampoListaSimples();
        clsFiltroCaracteristica = new br.com.martinello.matriz.componentesbasicos.CampoListaSimples();
        ppCadCaracteristica = new br.com.martinello.matriz.componentesbasicos.paineis.PainelPadrao();
        ppCadastroCaracteristica = new br.com.martinello.matriz.componentesbasicos.paineis.PainelPadrao();
        rObsCarCad = new br.com.martinello.matriz.componentesbasicos.Rotulo();
        rCarCadastro = new br.com.martinello.matriz.componentesbasicos.Rotulo();
        csCarCad = new br.com.martinello.matriz.componentesbasicos.CampoString();
        rSubCatCad = new br.com.martinello.matriz.componentesbasicos.Rotulo();
        clsSubCatCad = new br.com.martinello.matriz.componentesbasicos.CampoListaSimples();
        clsVisivelCarCad = new br.com.martinello.matriz.componentesbasicos.CampoListaSimples();
        rVisivelCad = new br.com.martinello.matriz.componentesbasicos.Rotulo();
        rCaracteristicaCad = new br.com.martinello.matriz.componentesbasicos.Rotulo();
        clsCarCad = new br.com.martinello.matriz.componentesbasicos.CampoListaSimples();
        rStatusCarCad = new br.com.martinello.matriz.componentesbasicos.Rotulo();
        clsSituacaoCarCad = new br.com.martinello.matriz.componentesbasicos.CampoListaSimples();
        csObsCarItemCad = new br.com.martinello.matriz.componentesbasicos.CampoString();
        ppTabCadCatIte = new br.com.martinello.matriz.componentesbasicos.paineis.PainelPadrao();
        jScrollPane1 = new javax.swing.JScrollPane();
        tpCadCarItem = new br.com.martinello.matriz.componentesbasicos.TabelaPadrao();
        painelPadrao1 = new br.com.martinello.matriz.componentesbasicos.paineis.PainelPadrao();
        botao1 = new br.com.martinello.matriz.componentesbasicos.Botao();
        botao2 = new br.com.martinello.matriz.componentesbasicos.Botao();
        botao3 = new br.com.martinello.matriz.componentesbasicos.Botao();
        painelPadrao2 = new br.com.martinello.matriz.componentesbasicos.paineis.PainelPadrao();
        btCancelarCarCad = new br.com.martinello.matriz.componentesbasicos.Botao();
        btSalvarCarCad = new br.com.martinello.matriz.componentesbasicos.Botao();
        painelPadrao3 = new br.com.martinello.matriz.componentesbasicos.paineis.PainelPadrao();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Cadastro Caracteristicas Itens");
        setMaximumSize(new java.awt.Dimension(1600, 900));
        setPreferredSize(new java.awt.Dimension(1600, 900));
        getContentPane().setLayout(new java.awt.BorderLayout());
        getContentPane().add(jpsCaracteristica, java.awt.BorderLayout.SOUTH);

        paCaracteristica.setToolTipText("");

        ppConsultaCaracteristica.setLayout(new java.awt.BorderLayout());

        ppTabConsultaCaract.setMinimumSize(new java.awt.Dimension(1029, 120));
        ppTabConsultaCaract.setPreferredSize(new java.awt.Dimension(1029, 420));
        ppTabConsultaCaract.setLayout(new java.awt.BorderLayout());

        tpConsultaCaract.setModel(otmCaracteristicaItem);
        tpConsultaCaract.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tpConsultaCaractKeyPressed(evt);
            }
        });
        jspTabConsultaCaract.setViewportView(tpConsultaCaract);

        ppTabConsultaCaract.add(jspTabConsultaCaract, java.awt.BorderLayout.CENTER);

        ppConsultaCaracteristica.add(ppTabConsultaCaract, java.awt.BorderLayout.SOUTH);

        ppFiltroConsultaCaract.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtros da pesquisa"));
        ppFiltroConsultaCaract.setMinimumSize(new java.awt.Dimension(1029, 180));
        ppFiltroConsultaCaract.setPreferredSize(new java.awt.Dimension(1029, 180));

        rFiltroDescCaract.setText("Descrição:");

        rFiltroStatusCaract.setText("Status:");

        jrbFiltroAtivoCaract.setText("Ativo");

        jrbFiltroInativoCaract.setText("Inativo");

        btFiltroPesquisar.setText("Pesquisar");
        btFiltroPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFiltroPesquisarActionPerformed(evt);
            }
        });

        btFiltroAlterar.setText("Alterar");
        btFiltroAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFiltroAlterarActionPerformed(evt);
            }
        });

        btFiltroCadastrar.setText("Cadastrar");
        btFiltroCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFiltroCadastrarActionPerformed(evt);
            }
        });

        btFiltroExcluir.setText("Excluir");

        rFiltroSubCategoria.setText("Caracteristica");

        rCatFiltro.setText("SubCategoria:");

        clsFiltroSubCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clsFiltroSubCatActionPerformed(evt);
            }
        });

        clsFiltroCaracteristica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clsFiltroCaracteristicaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ppFiltroConsultaCaractLayout = new javax.swing.GroupLayout(ppFiltroConsultaCaract);
        ppFiltroConsultaCaract.setLayout(ppFiltroConsultaCaractLayout);
        ppFiltroConsultaCaractLayout.setHorizontalGroup(
            ppFiltroConsultaCaractLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ppFiltroConsultaCaractLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ppFiltroConsultaCaractLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ppFiltroConsultaCaractLayout.createSequentialGroup()
                        .addComponent(rFiltroStatusCaract, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jrbFiltroAtivoCaract, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jrbFiltroInativoCaract, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ppFiltroConsultaCaractLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(ppFiltroConsultaCaractLayout.createSequentialGroup()
                            .addComponent(rCatFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(clsFiltroSubCat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(ppFiltroConsultaCaractLayout.createSequentialGroup()
                            .addComponent(rFiltroSubCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(clsFiltroCaracteristica, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ppFiltroConsultaCaractLayout.createSequentialGroup()
                            .addComponent(rFiltroDescCaract, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cscFiltroDescCaract, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 842, Short.MAX_VALUE)
                .addGroup(ppFiltroConsultaCaractLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ppFiltroConsultaCaractLayout.createSequentialGroup()
                        .addComponent(btFiltroPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btFiltroAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btFiltroCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btFiltroExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );
        ppFiltroConsultaCaractLayout.setVerticalGroup(
            ppFiltroConsultaCaractLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ppFiltroConsultaCaractLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(ppFiltroConsultaCaractLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btFiltroAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btFiltroCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btFiltroPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btFiltroExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(71, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ppFiltroConsultaCaractLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(ppFiltroConsultaCaractLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rCatFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clsFiltroSubCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ppFiltroConsultaCaractLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rFiltroSubCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clsFiltroCaracteristica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ppFiltroConsultaCaractLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rFiltroDescCaract, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cscFiltroDescCaract, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ppFiltroConsultaCaractLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rFiltroStatusCaract, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jrbFiltroAtivoCaract, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jrbFiltroInativoCaract, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );

        ppConsultaCaracteristica.add(ppFiltroConsultaCaract, java.awt.BorderLayout.NORTH);

        paCaracteristica.addTab("Consulta", ppConsultaCaracteristica);

        ppCadCaracteristica.setMaximumSize(new java.awt.Dimension(1024, 500));
        ppCadCaracteristica.setLayout(new java.awt.BorderLayout());

        ppCadastroCaracteristica.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtro de Cadastro"));
        ppCadastroCaracteristica.setMinimumSize(new java.awt.Dimension(1029, 150));
        ppCadastroCaracteristica.setPreferredSize(new java.awt.Dimension(1029, 180));

        csCarCad.setComponenteRotulo(rCarCadastro);
        csCarCad.setDescricaoRotulo("Descrição");
        csCarCad.setObrigatorio(true);

        clsSubCatCad.setComponenteRotulo(rSubCatCad);
        clsSubCatCad.setDescricaoRotulo("SubCategoria");
        clsSubCatCad.setObrigatorio(true);
        clsSubCatCad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clsSubCatCadActionPerformed(evt);
            }
        });

        clsVisivelCarCad.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sim", "Não", "" }));
        clsVisivelCarCad.setSelectedIndex(2);
        clsVisivelCarCad.setComponenteRotulo(rVisivelCad);
        clsVisivelCarCad.setDescricaoRotulo("Visível");
        clsVisivelCarCad.setObrigatorio(true);
        clsVisivelCarCad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clsVisivelCarCadActionPerformed(evt);
            }
        });

        clsCarCad.setComponenteRotulo(rCaracteristicaCad);
        clsCarCad.setDescricaoRotulo("Caracteristica");
        clsCarCad.setObrigatorio(true);
        clsCarCad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clsCarCadActionPerformed(evt);
            }
        });

        clsSituacaoCarCad.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ativo", "Inativo", " " }));
        clsSituacaoCarCad.setSelectedIndex(2);
        clsSituacaoCarCad.setComponenteRotulo(rStatusCarCad);
        clsSituacaoCarCad.setDescricaoRotulo("Situação");
        clsSituacaoCarCad.setObrigatorio(true);

        csObsCarItemCad.setComponenteRotulo(rObsCarCad);
        csObsCarItemCad.setDescricaoRotulo("Observação");
        csObsCarItemCad.setObrigatorio(true);

        javax.swing.GroupLayout ppCadastroCaracteristicaLayout = new javax.swing.GroupLayout(ppCadastroCaracteristica);
        ppCadastroCaracteristica.setLayout(ppCadastroCaracteristicaLayout);
        ppCadastroCaracteristicaLayout.setHorizontalGroup(
            ppCadastroCaracteristicaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ppCadastroCaracteristicaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ppCadastroCaracteristicaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ppCadastroCaracteristicaLayout.createSequentialGroup()
                        .addComponent(rSubCatCad, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clsSubCatCad, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rCaracteristicaCad, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clsCarCad, javax.swing.GroupLayout.DEFAULT_SIZE, 831, Short.MAX_VALUE)
                        .addGap(217, 217, 217))
                    .addGroup(ppCadastroCaracteristicaLayout.createSequentialGroup()
                        .addGroup(ppCadastroCaracteristicaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ppCadastroCaracteristicaLayout.createSequentialGroup()
                                .addComponent(rCarCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(csCarCad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(ppCadastroCaracteristicaLayout.createSequentialGroup()
                                .addComponent(rObsCarCad, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(csObsCarItemCad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(10, 10, 10))
                    .addGroup(ppCadastroCaracteristicaLayout.createSequentialGroup()
                        .addGroup(ppCadastroCaracteristicaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ppCadastroCaracteristicaLayout.createSequentialGroup()
                                .addComponent(rStatusCarCad, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clsSituacaoCarCad, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(ppCadastroCaracteristicaLayout.createSequentialGroup()
                                .addComponent(rVisivelCad, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clsVisivelCarCad, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        ppCadastroCaracteristicaLayout.setVerticalGroup(
            ppCadastroCaracteristicaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ppCadastroCaracteristicaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ppCadastroCaracteristicaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rSubCatCad, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clsSubCatCad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rCaracteristicaCad, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clsCarCad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ppCadastroCaracteristicaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rCarCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(csCarCad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ppCadastroCaracteristicaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rObsCarCad, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(csObsCarItemCad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ppCadastroCaracteristicaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rStatusCarCad, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clsSituacaoCarCad, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ppCadastroCaracteristicaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rVisivelCad, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clsVisivelCarCad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        ppCadCaracteristica.add(ppCadastroCaracteristica, java.awt.BorderLayout.NORTH);

        ppTabCadCatIte.setPreferredSize(new java.awt.Dimension(302, 340));
        ppTabCadCatIte.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setAlignmentX(2.0F);

        tpCadCarItem.setModel(otmCaracteristicaItemAdd);
        jScrollPane1.setViewportView(tpCadCarItem);

        ppTabCadCatIte.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        painelPadrao1.setPreferredSize(new java.awt.Dimension(120, 200));

        botao1.setText("Adicionar");
        botao1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao1ActionPerformed(evt);
            }
        });

        botao2.setText("Cancelar");
        botao2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao2ActionPerformed(evt);
            }
        });

        botao3.setText("Alterar");
        botao3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botao3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelPadrao1Layout = new javax.swing.GroupLayout(painelPadrao1);
        painelPadrao1.setLayout(painelPadrao1Layout);
        painelPadrao1Layout.setHorizontalGroup(
            painelPadrao1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelPadrao1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelPadrao1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botao1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botao2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botao3, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelPadrao1Layout.setVerticalGroup(
            painelPadrao1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelPadrao1Layout.createSequentialGroup()
                .addComponent(botao1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botao3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botao2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ppTabCadCatIte.add(painelPadrao1, java.awt.BorderLayout.EAST);

        painelPadrao2.setMinimumSize(new java.awt.Dimension(100, 30));
        painelPadrao2.setPreferredSize(new java.awt.Dimension(1024, 30));

        btCancelarCarCad.setText("Cancelar");
        btCancelarCarCad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarCarCadActionPerformed(evt);
            }
        });

        btSalvarCarCad.setText("Salvar");
        btSalvarCarCad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSalvarCarCadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelPadrao2Layout = new javax.swing.GroupLayout(painelPadrao2);
        painelPadrao2.setLayout(painelPadrao2Layout);
        painelPadrao2Layout.setHorizontalGroup(
            painelPadrao2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelPadrao2Layout.createSequentialGroup()
                .addContainerGap(958, Short.MAX_VALUE)
                .addComponent(btSalvarCarCad, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btCancelarCarCad, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(405, 405, 405))
        );
        painelPadrao2Layout.setVerticalGroup(
            painelPadrao2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelPadrao2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(painelPadrao2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btCancelarCarCad, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btSalvarCarCad, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        ppTabCadCatIte.add(painelPadrao2, java.awt.BorderLayout.SOUTH);

        painelPadrao3.setPreferredSize(new java.awt.Dimension(10, 200));

        javax.swing.GroupLayout painelPadrao3Layout = new javax.swing.GroupLayout(painelPadrao3);
        painelPadrao3.setLayout(painelPadrao3Layout);
        painelPadrao3Layout.setHorizontalGroup(
            painelPadrao3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        painelPadrao3Layout.setVerticalGroup(
            painelPadrao3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 602, Short.MAX_VALUE)
        );

        ppTabCadCatIte.add(painelPadrao3, java.awt.BorderLayout.LINE_START);

        ppCadCaracteristica.add(ppTabCadCatIte, java.awt.BorderLayout.CENTER);

        paCaracteristica.addTab("Cadastro / Alteração", ppCadCaracteristica);

        getContentPane().add(paCaracteristica, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btFiltroPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFiltroPesquisarActionPerformed
        buscarCarItem();
    }//GEN-LAST:event_btFiltroPesquisarActionPerformed

    private void btFiltroCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFiltroCadastrarActionPerformed
        salvarAlterar = "Salvar";
        paCaracteristica.setSelectedComponent(ppCadCaracteristica);
        ppCadCaracteristica.setVisible(true);
        paCaracteristica.setEnabledAt(0, false);

    }//GEN-LAST:event_btFiltroCadastrarActionPerformed

    private void tpConsultaCaractKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tpConsultaCaractKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tpConsultaCaractKeyPressed

    private void btCancelarCarCadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarCarCadActionPerformed
        limparCadastrar();
    }//GEN-LAST:event_btCancelarCarCadActionPerformed

    private void btSalvarCarCadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSalvarCarCadActionPerformed
        salvarCaracteristica();

    }//GEN-LAST:event_btSalvarCarCadActionPerformed

    private void btFiltroAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFiltroAlterarActionPerformed
        salvarAlterar = "Alterar";
        alterarSubCategoria();
        if (resultado = true) {
            paCaracteristica.setSelectedComponent(ppCadCaracteristica);
            ppCadCaracteristica.setVisible(true);
        } else {

        }

    }//GEN-LAST:event_btFiltroAlterarActionPerformed

    private void clsFiltroSubCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clsFiltroSubCatActionPerformed
        carregarCaracteristica("Consulta");
    }//GEN-LAST:event_clsFiltroSubCatActionPerformed

    private void clsFiltroCaracteristicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clsFiltroCaracteristicaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clsFiltroCaracteristicaActionPerformed

    private void clsCarCadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clsCarCadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clsCarCadActionPerformed

    private void clsSubCatCadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clsSubCatCadActionPerformed
        carregarCaracteristica("Cadastro");
    }//GEN-LAST:event_clsSubCatCadActionPerformed

    private void clsVisivelCarCadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clsVisivelCarCadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clsVisivelCarCadActionPerformed

    private void botao2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao2ActionPerformed
     limparCadastrar();
    }//GEN-LAST:event_botao2ActionPerformed

    private void botao3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botao3ActionPerformed

    private void botao1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botao1ActionPerformed
        salvarTabelaItem();
    }//GEN-LAST:event_botao1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private br.com.martinello.matriz.componentesbasicos.Botao botao1;
    private br.com.martinello.matriz.componentesbasicos.Botao botao2;
    private br.com.martinello.matriz.componentesbasicos.Botao botao3;
    private br.com.martinello.matriz.componentesbasicos.Botao btCancelarCarCad;
    private br.com.martinello.matriz.componentesbasicos.Botao btFiltroAlterar;
    private br.com.martinello.matriz.componentesbasicos.Botao btFiltroCadastrar;
    private br.com.martinello.matriz.componentesbasicos.Botao btFiltroExcluir;
    private br.com.martinello.matriz.componentesbasicos.Botao btFiltroPesquisar;
    private br.com.martinello.matriz.componentesbasicos.Botao btSalvarCarCad;
    private br.com.martinello.matriz.componentesbasicos.CampoListaSimples clsCarCad;
    private br.com.martinello.matriz.componentesbasicos.CampoListaSimples clsFiltroCaracteristica;
    private br.com.martinello.matriz.componentesbasicos.CampoListaSimples clsFiltroSubCat;
    private br.com.martinello.matriz.componentesbasicos.CampoListaSimples clsSituacaoCarCad;
    private br.com.martinello.matriz.componentesbasicos.CampoListaSimples clsSubCatCad;
    private br.com.martinello.matriz.componentesbasicos.CampoListaSimples clsVisivelCarCad;
    private br.com.martinello.matriz.componentesbasicos.CampoString csCarCad;
    private br.com.martinello.matriz.componentesbasicos.CampoString csObsCarItemCad;
    private br.com.martinello.matriz.componentesbasicos.consulta.CampoStringConsulta cscFiltroDescCaract;
    private javax.swing.JScrollPane jScrollPane1;
    private br.com.martinello.matriz.componentesbasicos.paineis.JPStatus jpsCaracteristica;
    private javax.swing.JRadioButton jrbFiltroAtivoCaract;
    private javax.swing.JRadioButton jrbFiltroInativoCaract;
    private javax.swing.JScrollPane jspTabConsultaCaract;
    private br.com.martinello.matriz.componentesbasicos.paineis.PainelAba paCaracteristica;
    private br.com.martinello.matriz.componentesbasicos.paineis.PainelPadrao painelPadrao1;
    private br.com.martinello.matriz.componentesbasicos.paineis.PainelPadrao painelPadrao2;
    private br.com.martinello.matriz.componentesbasicos.paineis.PainelPadrao painelPadrao3;
    private br.com.martinello.matriz.componentesbasicos.paineis.PainelPadrao ppCadCaracteristica;
    private br.com.martinello.matriz.componentesbasicos.paineis.PainelPadrao ppCadastroCaracteristica;
    private br.com.martinello.matriz.componentesbasicos.paineis.PainelPadrao ppConsultaCaracteristica;
    private br.com.martinello.matriz.componentesbasicos.paineis.PainelPadrao ppFiltroConsultaCaract;
    private br.com.martinello.matriz.componentesbasicos.paineis.PainelPadrao ppTabCadCatIte;
    private br.com.martinello.matriz.componentesbasicos.paineis.PainelPadrao ppTabConsultaCaract;
    private br.com.martinello.matriz.componentesbasicos.Rotulo rCarCadastro;
    private br.com.martinello.matriz.componentesbasicos.Rotulo rCaracteristicaCad;
    private br.com.martinello.matriz.componentesbasicos.Rotulo rCatFiltro;
    private br.com.martinello.matriz.componentesbasicos.Rotulo rFiltroDescCaract;
    private br.com.martinello.matriz.componentesbasicos.Rotulo rFiltroStatusCaract;
    private br.com.martinello.matriz.componentesbasicos.Rotulo rFiltroSubCategoria;
    private br.com.martinello.matriz.componentesbasicos.Rotulo rObsCarCad;
    private br.com.martinello.matriz.componentesbasicos.Rotulo rStatusCarCad;
    private br.com.martinello.matriz.componentesbasicos.Rotulo rSubCatCad;
    private br.com.martinello.matriz.componentesbasicos.Rotulo rVisivelCad;
    private br.com.martinello.matriz.componentesbasicos.TabelaPadrao tpCadCarItem;
    private br.com.martinello.matriz.componentesbasicos.TabelaPadrao tpConsultaCaract;
    // End of variables declaration//GEN-END:variables

    private void buscarCarItem() {
        try {
            filtroCaractItem = new CaracteristicaItem();
            lCaracteristicas = new ArrayList<>();
            caracItemControl = new CaracteristicaItemControl();

            if (cscFiltroDescCaract.getFiltroOld() != null) {
                filtroCaractItem.setSubCategoria(cscFiltroDescCaract.getFiltroOld().toString().toUpperCase());
            }
            if (clsFiltroSubCat.getSelectedItem().toString().equalsIgnoreCase("0 - TODAS")) {

            } else {
                cat = clsFiltroSubCat.getSelectedItem().toString();
                for (Categoria categorias : lCategoria) {
                    String catSelect = categorias.getIdCategoria() + " - " + categorias.getCategoria();
                    if (catSelect.equalsIgnoreCase(clsFiltroSubCat.getSelectedItem().toString())) {
                        filtroCaractItem.setIdCategoria(categorias.getIdCategoria());
                    }
                }
            }
            if (clsFiltroCaracteristica.getSelectedItem().toString().equalsIgnoreCase("0 - TODAS")) {

            } else {
                cat = clsFiltroCaracteristica.getSelectedItem().toString();
                for (SubCategoria subCategorias : lSubCategoria) {
                    String subCatSelect = subCategorias.getIdCategoria() + " - " + subCategorias.getCategoria();
                    if (subCatSelect.equalsIgnoreCase(clsFiltroCaracteristica.getSelectedItem().toString())) {
                        filtroCaractItem.setIdSubCategoria(subCategorias.getIdSubCategoria());
                    }
                }
            }

            String sitCat = "";
            if (jrbFiltroAtivoCaract.isSelected()) {
                sitCat = "'" + "A" + "'";
            }
            if (jrbFiltroInativoCaract.isSelected()) {
                if (sitCat.isEmpty()) {
                    sitCat = "'" + "I" + "'";
                } else {
                    sitCat = sitCat + ",'I'";
                }
            }
            System.out.println("sit:" + sitCat);
            filtroCaractItem.setSituacao(sitCat);
            lCaracteristicasItem = caracItemControl.listarCarItem(filtroCaractItem);
            otmCaracteristicaItem.setData(lCaracteristicasItem);
            otmCaracteristicaItem.fireTableDataChanged();

            tpConsultaCaract.setForeground(Color.BLACK);

            jpsCaracteristica.setStatus("Pesquisa realizada com sucesso.", JPStatus.NORMAL);

            if (tpConsultaCaract.getRowCount() > 0) {
                tpConsultaCaract.packAll();
                tpConsultaCaract.addRowSelectionInterval(tpConsultaCaract.convertRowIndexToView(0), tpConsultaCaract.convertRowIndexToView(0));
                tpConsultaCaract.grabFocus();
            }
        } catch (ErroSistemaException ex) {
            jpsCaracteristica.setStatus(ex.getMessage(), JPStatus.ERRO);
        }
        //carregarCategoria();
    }

    private void limparCadastrar() {
        clsSubCatCad.setSelectedIndex(0);
        csCarCad.setText(null);
        clsSituacaoCarCad.setSelectedIndex(2);
        salvarAlterar = "Salvar";
        lCaracteristicasItemAdd.clear();
        paCaracteristica.setSelectedComponent(ppConsultaCaracteristica);
        ppCadCaracteristica.setVisible(false);
        paCaracteristica.setEnabledAt(1, false);
        paCaracteristica.setEnabledAt(0, true);
        buscarCarItem();
    }

    private boolean alterarSubCategoria() {
        subCategoria = new SubCategoria();
        resultado = false;
        subCategoriaControl = new SubCategoriaControl();
        int linha = tpConsultaCaract.getSelectedRow();
        codigo = "0";
        if (linha < 0) {
            jpsCaracteristica.setStatus("Selecione uma Categoria na Tabela, antes de clicar em alterar", JPStatus.ALERTA);
            return resultado;
        } else {
            codigo = (tpConsultaCaract.getValueAt(linha, 0).toString());
            paCaracteristica.setSelectedComponent(ppCadCaracteristica);
            //   subCategoria = subCategoriaControl.buscarSubCategoria(codigo);
            catSelect = subCategoria.getIdCategoria() + " - " + subCategoria.getCategoria();
            clsSubCatCad.setSelectedItem(catSelect);
            csCarCad.setText(subCategoria.getSubCategoria());
            if (subCategoria.getSituacao().equalsIgnoreCase("A")) {
                clsSituacaoCarCad.setSelectedIndex(0);
            } else {
                clsSituacaoCarCad.setSelectedIndex(1);
            }
            salvarAlterar = "Alterar";

            resultado = true;
        }
        return resultado;
    }

    private boolean salvarCaracteristica() {
        resultado = false;
        String status = clsCarCad.getSelectedItem().toString();
        System.out.println("Teste:" + status);
        if (clsSituacaoCarCad.getSelectedItem().toString().equalsIgnoreCase(" ")) {
            jpsCaracteristica.setStatus("Erro é necessário informar o Status da Caracteristica!", JPStatus.ALERTA);
            return resultado;
        }
        if (clsSituacaoCarCad.getSelectedItem().toString().equalsIgnoreCase(" ")) {
            jpsCaracteristica.setStatus("Erro é necessário informar o Status da Caracteristica!", JPStatus.ALERTA);
            return resultado;
        }
        if (csCarCad.getString().equalsIgnoreCase("")) {
            jpsCaracteristica.setStatus("Erro é necessário informar a descrição da Caracteristica!", JPStatus.ALERTA);
            return resultado;
        }
        caracteristicaItem = new CaracteristicaItem();
        caracItemControl = new CaracteristicaItemControl();
        if (clsCarCad.getSelectedItem().toString().equalsIgnoreCase("0 - TODAS")) {
            jpsCaracteristica.setStatus("Erro é necessário informar a SubCategoria!", JPStatus.ALERTA);
            return resultado;
        } else {
            cat = clsCarCad.getSelectedItem().toString();
            for (SubCategoria subCategorias : lSubCategoria) {
                String idSubCategoria = subCategorias.getIdSubCategoria() + " - " + subCategorias.getSubCategoria();
                if (idSubCategoria.equalsIgnoreCase(clsCarCad.getSelectedItem().toString())) {
                    caracteristicaItem.setIdCategoria(subCategorias.getIdCategoria());
                    caracteristicaItem.setIdSubCategoria(subCategorias.getIdSubCategoria());
                }
            }
        }
        caracteristicaItem.setIdUsuario(117);// Lembrar de pegar idUsuário 

        caracteristicaItem.setCaracteristica(csCarCad.getString());
        caracteristicaItem.setObservacao(csObsCarItemCad.getText());
        if (clsSituacaoCarCad.getSelectedItem().toString().equalsIgnoreCase("ATIVO")) {
            caracteristica.setSituacao("A");
        } else {
            caracteristica.setSituacao("I");
        }
        if (clsVisivelCarCad.getSelectedItem().toString().equalsIgnoreCase("SIM")) {
            caracteristica.setVisivel("S");
        } else {
            caracteristica.setVisivel("N");
        }
        if (salvarAlterar.equalsIgnoreCase("Alterar")) {
            try {
                if (clsSubCatCad.getSelectedItem().toString().equalsIgnoreCase("0 - Todas")) {
                    jpsCaracteristica.setStatus("Erro é necessário informar uma SubCategoria!", JPStatus.ALERTA, 20);
                    return resultado;
                } else {
                    if (!clsSubCatCad.getSelectedItem().toString().equalsIgnoreCase(catSelect)) {
                        int option = JOptionPane.showConfirmDialog(rootPane, "Deseja  relamente alterar a SubCategoria a qual a subCategoria pertence?", "Confirma", JOptionPane.YES_NO_OPTION);
                        if (option == 0) {
                            String codPro = subCategoriaControl.validaAltCategoria(codigo);
                            if (!codPro.equalsIgnoreCase("")) {
                                jpsCaracteristica.setStatus("Erro ao altera SubCategoria! O registro possui produto(s) relacionado(s). Produto(s):" + codPro, JPStatus.ALERTA, 20);
                                return resultado;
                            }
                        } else {
                            jpsCaracteristica.setStatus("Processo Cancelado!", JPStatus.ALERTA, 20);
                            return resultado;
                        }
                    }
                }
                resultado = caracItemControl.updateCarItem(caracteristicaItem);
            } catch (ErroSistemaException ex) {
                jpsCaracteristica.setStatus(ex.getMessage(), JPStatus.ERRO);
            }
        } else {
            try {
                resultado = caracItemControl.insertCarItem(caracteristicaItem);
            } catch (ErroSistemaException ex) {
                jpsCaracteristica.setStatus(ex.getMessage(), JPStatus.ERRO, ex);
                return resultado;
            }
        }
        if (resultado = true) {
            jpsCaracteristica.setStatus("Registro Cadastrado com Sucesso!", JPStatus.NORMAL, 20);
            limparCadastrar();
        }
        return resultado;
    }

    private void carregarCategoria() {
        categoria = new Categoria();
        subCategoriaControl = new SubCategoriaControl();
        lCategoria = new ArrayList<>();
        if (lCategoria.size() > 0) {
            lCategoria.clear();
        }
        try {
            lCategoria = subCategoriaControl.listarJcbCategoria(categoria);
        } catch (ErroSistemaException ex) {
            jpsCaracteristica.setStatus(ex.getLocalizedMessage(), JPStatus.ERRO, ex);
        }

        clsFiltroSubCat.removeAllItems();
        clsSubCatCad.removeAllItems();
        for (Categoria categorias : lCategoria) {
            clsFiltroSubCat.addItem(categorias.getIdCategoria() + " - " + categorias.getCategoria());
            clsSubCatCad.addItem(categorias.getIdCategoria() + " - " + categorias.getCategoria());
        }
    }

    private void carregarCaracteristica(String Origem) {
        caracteristica = new Caracteristica();
        caracItemControl = new CaracteristicaItemControl();
        lCaracteristicas = new ArrayList<>();
        try {
            if (Origem.equalsIgnoreCase("Consulta")) {
                if (clsFiltroSubCat.getSelectedItem().toString().equalsIgnoreCase("0 - TODAS")) {

                } else {
                    cat = clsFiltroSubCat.getSelectedItem().toString();
                    for (SubCategoria subCategorias : lSubCategoria) {
                        String idCategoria = subCategorias.getIdCategoria() + " - " + subCategorias.getCategoria();
                        if (idCategoria.equalsIgnoreCase(clsFiltroSubCat.getSelectedItem().toString())) {
                            caracteristica.setIdCategoria(subCategorias.getIdCategoria());
                            caracteristica.setIdSubCategoria(subCategorias.getIdSubCategoria());
                        }
                    }
                }
            }
            if (Origem.equalsIgnoreCase("Cadastro")) {
                if (clsSubCatCad.getSelectedItem().toString().equalsIgnoreCase("0 - TODAS")) {

                } else {
                    cat = clsSubCatCad.getSelectedItem().toString();
                    for (SubCategoria subCategorias : lSubCategoria) {
                        String idSubCategoria = subCategorias.getIdSubCategoria() + " - " + subCategorias.getSubCategoria();
                        if (idSubCategoria.equalsIgnoreCase(clsSubCatCad.getSelectedItem().toString())) {
                            caracteristica.setIdCategoria(subCategorias.getIdCategoria());
                            caracteristica.setIdSubCategoria(subCategorias.getIdSubCategoria());
                        }
                    }
                }
            }

            lCaracteristicas = caracItemControl.listarJcbCarItens(caracteristica);
        } catch (ErroSistemaException ex) {
            jpsCaracteristica.setStatus(ex.getLocalizedMessage(), JPStatus.ERRO, ex);
        }
        clsFiltroCaracteristica.removeAllItems();
        clsCarCad.removeAllItems();
        for (Caracteristica caracteristicas : lCaracteristicas) {
            clsFiltroCaracteristica.addItem(caracteristicas.getIdCaracteristica() + " - " + caracteristicas.getCaracteristica());
            clsCarCad.addItem(caracteristicas.getIdCaracteristica() + " - " + caracteristicas.getCaracteristica());
        }
    }

    private void carregarSubCategoria(String Origem) {
        subCategoria = new SubCategoria();
        subCategoriaControl = new SubCategoriaControl();
        lSubCategoria = new ArrayList<>();

        try {
            /*
            if (Origem.equalsIgnoreCase("Consulta")) {
                if (clsFiltroSubCat.getSelectedItem().toString().equalsIgnoreCase("0 - TODAS")) {

                } else {
                    cat = clsFiltroSubCat.getSelectedItem().toString();
                    for (Categoria categorias : lCategoria) {
                        String idCategoria = categorias.getIdCategoria() + " - " + categorias.getCategoria();
                        if (idCategoria.equalsIgnoreCase(clsFiltroSubCat.getSelectedItem().toString())) {
                            subCategoria.setIdCategoria(categorias.getIdCategoria());
                        }
                    }
                }
            }
            if (Origem.equalsIgnoreCase("Cadastro")) {
                if (clsSubCatCad.getSelectedItem().toString().equalsIgnoreCase("0 - TODAS")) {

                } else {
                    cat = clsSubCatCad.getSelectedItem().toString();
                    for (Categoria categorias : lCategoria) {
                        String idCategoria = categorias.getIdCategoria() + " - " + categorias.getCategoria();
                        if (idCategoria.equalsIgnoreCase(clsSubCatCad.getSelectedItem().toString())) {
                            subCategoria.setIdCategoria(categorias.getIdCategoria());
                        }
                    }
                }
            }*/

            lSubCategoria = subCategoriaControl.listarJcbSubCategoria(subCategoria);
        } catch (ErroSistemaException ex) {
            jpsCaracteristica.setStatus(ex.getLocalizedMessage(), JPStatus.ERRO, ex);
        }
        clsFiltroCaracteristica.removeAllItems();
        clsCarCad.removeAllItems();
        for (SubCategoria subCategorias : lSubCategoria) {
            clsFiltroSubCat.addItem(subCategorias.getIdSubCategoria() + " - " + subCategorias.getSubCategoria());
            clsSubCatCad.addItem(subCategorias.getIdSubCategoria() + " - " + subCategorias.getSubCategoria());
        }
    }

    private boolean salvarTabelaItem() {
        resultado = false;
        caracteristicaItemAdd = new CaracteristicaItem();
        caracteristicaItem = new CaracteristicaItem();
        caracItemControl = new CaracteristicaItemControl();
        if (clsCarCad.getSelectedItem().toString().equalsIgnoreCase("0 - TODAS")) {
            jpsCaracteristica.setStatus("Erro é necessário informar a SubCategoria!", JPStatus.ALERTA);
            return resultado;
        } else {
            cat = clsCarCad.getSelectedItem().toString();
            for (Caracteristica caracteristicas : lCaracteristicas) {
                String idSubCategoria = caracteristicas.getIdCaracteristica() + " - " + caracteristicas.getCaracteristica();
                if (idSubCategoria.equalsIgnoreCase(clsCarCad.getSelectedItem().toString())) {
                    caracteristicaItemAdd.setIdCaracteristica(caracteristicas.getIdCaracteristica());
                    caracteristicaItemAdd.setIdSubCategoria(caracteristicas.getIdSubCategoria());
                    caracteristicaItemAdd.setIdCategoria(caracteristicas.getIdSubCategoria());
                    caracteristicaItemAdd.setSubCategoria(caracteristicas.getSubCategoria());
                    caracteristicaItemAdd.setCaracteristica(caracteristicas.getCaracteristica());
                }
            }
        }
        caracteristicaItemAdd.setCaracteristicaItem(csCarCad.getString());

        if (clsSituacaoCarCad.getSelectedItem().toString().equalsIgnoreCase("ATIVO")) {
            caracteristicaItemAdd.setSituacao("A");
        } else {
            caracteristicaItemAdd.setSituacao("I");
        }
        if (clsVisivelCarCad.getSelectedItem().toString().equalsIgnoreCase("SIM")) {
            caracteristicaItemAdd.setVisivel("S");
        } else {
            caracteristicaItemAdd.setVisivel("N");
        }
        caracteristicaItemAdd.setSeqCatIte(seqCarItem + 1);
        caracteristicaItemAdd.setObservacao(csObsCarItemCad.getString());
        caracteristicaItemAdd.setIdUsuario(117);
        lCaracteristicasItemAdd.add(caracteristicaItemAdd);
        otmCaracteristicaItemAdd.setData(lCaracteristicasItemAdd);
        otmCaracteristicaItemAdd.fireTableDataChanged();

        tpCadCarItem.setForeground(Color.BLACK);

        jpsCaracteristica.setStatus("Item adicionado com sucesso!.", JPStatus.NORMAL);

        if (tpCadCarItem.getRowCount() > 0) {
            tpCadCarItem.packAll();
            tpCadCarItem.addRowSelectionInterval(tpCadCarItem.convertRowIndexToView(0), tpCadCarItem.convertRowIndexToView(0));
            tpCadCarItem.grabFocus();
        }
          limparAddItem();
        return resultado;
     

    }

    public void limparAddItem() {

        csObsCarItemCad.setText(null);
        clsCarCad.setSelectedIndex(0);
        csCarCad.setText(null);
        clsSituacaoCarCad.setSelectedIndex(2);
        clsVisivelCarCad.setSelectedIndex(2);

    }
}
