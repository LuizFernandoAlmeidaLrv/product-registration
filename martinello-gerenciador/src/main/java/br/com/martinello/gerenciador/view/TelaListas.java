/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.martinello.gerenciador.view;

import br.com.martinello.componentesbasicos.Campo;
import br.com.martinello.componentesbasicos.ConstantesGlobais;
import br.com.martinello.bd.matriz.control.ListaControl;
import br.com.martinello.bd.matriz.model.domain.Lista;
import br.com.martinello.bd.matriz.model.domain.ListaItem;
import br.com.martinello.componentesbasicos.paineis.JPStatus;
import br.com.martinello.util.excessoes.ErroSistemaException;
import br.com.martinello.util.filtro.Filtro;
import com.towel.swing.table.ObjectTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.OptionalInt;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.event.ListSelectionEvent;

/**
 *
 * @author Sidnei
 */
public class TelaListas extends TelaPadrao {

    protected ObjectTableModel<Lista> otmConsultaLista = new ObjectTableModel(Lista.class, "idLista,lista,descricao");
    protected ObjectTableModel<ListaItem> otmConsultaListaItem = new ObjectTableModel(ListaItem.class, "idItemLista,valor,descricao,ordem");
    protected ObjectTableModel<ListaItem> otmItemLista = new ObjectTableModel(ListaItem.class, "valor,descricao,ordem");

    private ListaControl listaControl;

    private List<Campo> listaCampoLista = new ArrayList<>();

    /**
     * Creates new form TelaTabelas
     */
    public TelaListas() {

        listaControl = new ListaControl();

        initComponents();

        //csLista.setTextoRotulo((Rotulo) jlLista);
        //csDescricao.setTextoRotulo((Rotulo) jlDescricao);
        listaCampoLista.add(csLista);
        listaCampoLista.add(csDescricao);

        otmConsultaLista.setData(listaControl.getlConsultaListas());

        otmItemLista.setEditableDefault(true);
        tpCadastroItensLista.setModel(otmItemLista);
        jtpTabela.setEnabledAt(1, false);

        tpCadastroItensLista.setColumnSelectionAllowed(true);
        tpCadastroItensLista.setRowSelectionAllowed(true);
        tpCadastroItensLista.setSurrendersFocusOnKeystroke(true);

        tpCadastroItensLista.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "Enter");
        tpCadastroItensLista.getActionMap().put("Enter", new AbstractAction() {
            private static final long serialVersionUID = 1L;

            @Override
            public void actionPerformed(ActionEvent ae) {
                //System.out.println("Comportamento sobrescrito");
                int quantidadeColunas = tpCadastroItensLista.getColumnCount();
                int quantidadeLinhas = tpCadastroItensLista.getRowCount();
                int linhaSelecionada = tpCadastroItensLista.getSelectedRow();
                int colunaSelecionada = tpCadastroItensLista.getSelectedColumn();

                if (((colunaSelecionada + 1) >= quantidadeColunas) && ((linhaSelecionada + 1) < quantidadeLinhas)) {
                    colunaSelecionada = 0;
                    linhaSelecionada++;
                } else if ((colunaSelecionada + 1) < quantidadeColunas) {
                    colunaSelecionada++;
                }

                tpCadastroItensLista.setRowSelectionInterval(linhaSelecionada, linhaSelecionada);
                tpCadastroItensLista.setColumnSelectionInterval(colunaSelecionada, colunaSelecionada);
                //jxtCadastroItensLista.getse
            }
        });

        tpConsultaListas.getSelectionModel().addListSelectionListener((ListSelectionEvent evt) -> {
            if (evt.getValueIsAdjusting()) {
                return;
            }

            if (tpConsultaListas.getLinhaSelecionada() >= 0) {
                otmConsultaListaItem.setData(otmConsultaLista.getValue(tpConsultaListas.getLinhaSelecionada()).getItensLista());
                tpConsultaItensLista.packAll();
            } else {
                otmConsultaListaItem.clear();
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtpTabela = new javax.swing.JTabbedPane();
        jpConsulta = new javax.swing.JPanel();
        jpFiltros = new javax.swing.JPanel();
        jlFiltroTabela = new br.com.martinello.componentesbasicos.Rotulo();
        jlFiltroDescricao = new br.com.martinello.componentesbasicos.Rotulo();
        jbIncluir = new br.com.martinello.componentesbasicos.Botao();
        jbAlterar = new br.com.martinello.componentesbasicos.Botao();
        jbPesquisar = new br.com.martinello.componentesbasicos.Botao();
        jbExcluir = new br.com.martinello.componentesbasicos.Botao();
        cscFiltroLista = new br.com.martinello.componentesbasicos.consulta.CampoStringConsulta();
        cscFiltroDescricao = new br.com.martinello.componentesbasicos.consulta.CampoStringConsulta();
        jSplitPane = new javax.swing.JSplitPane();
        jspConsultaTabelas = new javax.swing.JScrollPane();
        tpConsultaListas = new br.com.martinello.componentesbasicos.TabelaPadrao();
        jtpConsulta = new javax.swing.JTabbedPane();
        jspConsultaItensLista = new javax.swing.JScrollPane();
        tpConsultaItensLista = new br.com.martinello.componentesbasicos.TabelaPadrao();
        jpCadastro = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        rLista = new br.com.martinello.componentesbasicos.Rotulo();
        rDescricao = new br.com.martinello.componentesbasicos.Rotulo();
        jbSalvar = new br.com.martinello.componentesbasicos.Botao();
        jbCancelar = new br.com.martinello.componentesbasicos.Botao();
        csLista = new br.com.martinello.componentesbasicos.CampoString(Lista.class,"lista");
        csDescricao = new br.com.martinello.componentesbasicos.CampoString(Lista.class,"descricao");
        jtpCadastro = new javax.swing.JTabbedPane();
        pListaItens = new br.com.martinello.componentesbasicos.paineis.Painel();
        jspCadastroItensLista = new javax.swing.JScrollPane();
        tpCadastroItensLista = new br.com.martinello.componentesbasicos.TabelaPadrao();
        pBotoesListaItem = new br.com.martinello.componentesbasicos.paineis.Painel();
        jbSubirMenu = new br.com.martinello.componentesbasicos.Botao();
        jbDescerMenu = new br.com.martinello.componentesbasicos.Botao();
        jpsStatusBar = new br.com.martinello.componentesbasicos.paineis.JPStatus();

        setClosable(true);
        setIconifiable(true);
        setTitle("Gerenciamento de Listas");

        jpFiltros.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Filtros da Pesquisa", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, ConstantesGlobais.FONTE_BORDA_JPANEL));

        jlFiltroTabela.setText("Lista:");

        jlFiltroDescricao.setText("Descrição:");

        jbIncluir.setMnemonic('i');
        jbIncluir.setText("Incluir");
        jbIncluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbIncluirActionPerformed(evt);
            }
        });

        jbAlterar.setMnemonic('a');
        jbAlterar.setText("Alterar");
        jbAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAlterarActionPerformed(evt);
            }
        });

        jbPesquisar.setMnemonic('p');
        jbPesquisar.setText("Pesquisar");
        jbPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPesquisarActionPerformed(evt);
            }
        });

        jbExcluir.setMnemonic('e');
        jbExcluir.setText("Excluir");
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpFiltrosLayout = new javax.swing.GroupLayout(jpFiltros);
        jpFiltros.setLayout(jpFiltrosLayout);
        jpFiltrosLayout.setHorizontalGroup(
            jpFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFiltrosLayout.createSequentialGroup()
                .addGroup(jpFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jlFiltroDescricao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlFiltroTabela, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cscFiltroDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 760, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cscFiltroLista, javax.swing.GroupLayout.PREFERRED_SIZE, 760, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jpFiltrosLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbIncluir, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
        );

        jpFiltrosLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jlFiltroDescricao, jlFiltroTabela});

        jpFiltrosLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cscFiltroDescricao, cscFiltroLista});

        jpFiltrosLayout.setVerticalGroup(
            jpFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFiltrosLayout.createSequentialGroup()
                .addGroup(jpFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlFiltroTabela, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cscFiltroLista, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jlFiltroDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cscFiltroDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbIncluir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jpFiltrosLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jlFiltroDescricao, jlFiltroTabela});

        jpFiltrosLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cscFiltroDescricao, cscFiltroLista});

        jSplitPane.setDividerLocation(150);
        jSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jspConsultaTabelas.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jspConsultaTabelas.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jspConsultaTabelas.setPreferredSize(new java.awt.Dimension(319, 200));

        tpConsultaListas.setModel(otmConsultaLista);
        tpConsultaListas.setEditable(false);
        tpConsultaListas.setPreferredScrollableViewportSize(new java.awt.Dimension(300, 200));
        tpConsultaListas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tpConsultaListasMouseClicked(evt);
            }
        });
        jspConsultaTabelas.setViewportView(tpConsultaListas);

        jSplitPane.setTopComponent(jspConsultaTabelas);

        tpConsultaItensLista.setModel(otmConsultaListaItem);
        tpConsultaItensLista.setEditable(false);
        jspConsultaItensLista.setViewportView(tpConsultaItensLista);

        jtpConsulta.addTab("Itens", jspConsultaItensLista);

        jSplitPane.setRightComponent(jtpConsulta);

        javax.swing.GroupLayout jpConsultaLayout = new javax.swing.GroupLayout(jpConsulta);
        jpConsulta.setLayout(jpConsultaLayout);
        jpConsultaLayout.setHorizontalGroup(
            jpConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpFiltros, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSplitPane)
        );
        jpConsultaLayout.setVerticalGroup(
            jpConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpConsultaLayout.createSequentialGroup()
                .addComponent(jpFiltros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE))
        );

        jtpTabela.addTab("Consulta", jpConsulta);

        jbSalvar.setMnemonic('s');
        jbSalvar.setText("Salvar");
        jbSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarActionPerformed(evt);
            }
        });

        jbCancelar.setMnemonic('c');
        jbCancelar.setText("Cancelar");
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });

        csLista.setComponenteRotulo(rLista);
        csLista.setDescricaoRotulo("Lista");
        csLista.setObrigatorio(true);

        csDescricao.setComponenteRotulo(rDescricao);
        csDescricao.setDescricaoRotulo("Descrição");
        csDescricao.setObrigatorio(true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rLista, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jbSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(csLista, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(csDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 742, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(csLista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rLista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(csDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pListaItens.setLayout(new java.awt.BorderLayout());

        tpCadastroItensLista.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tpCadastroItensLista.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tpCadastroItensListaKeyPressed(evt);
            }
        });
        jspCadastroItensLista.setViewportView(tpCadastroItensLista);

        pListaItens.add(jspCadastroItensLista, java.awt.BorderLayout.CENTER);

        jbSubirMenu.setMnemonic('u');
        jbSubirMenu.setText("Subir");
        jbSubirMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSubirMenuActionPerformed(evt);
            }
        });

        jbDescerMenu.setMnemonic('d');
        jbDescerMenu.setText("Descer");
        jbDescerMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDescerMenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pBotoesListaItemLayout = new javax.swing.GroupLayout(pBotoesListaItem);
        pBotoesListaItem.setLayout(pBotoesListaItemLayout);
        pBotoesListaItemLayout.setHorizontalGroup(
            pBotoesListaItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pBotoesListaItemLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pBotoesListaItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbSubirMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbDescerMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pBotoesListaItemLayout.setVerticalGroup(
            pBotoesListaItemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pBotoesListaItemLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbSubirMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbDescerMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(234, Short.MAX_VALUE))
        );

        pListaItens.add(pBotoesListaItem, java.awt.BorderLayout.LINE_END);

        jtpCadastro.addTab("tab2", pListaItens);

        javax.swing.GroupLayout jpCadastroLayout = new javax.swing.GroupLayout(jpCadastro);
        jpCadastro.setLayout(jpCadastroLayout);
        jpCadastroLayout.setHorizontalGroup(
            jpCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jtpCadastro)
        );
        jpCadastroLayout.setVerticalGroup(
            jpCadastroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCadastroLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtpCadastro))
        );

        jtpTabela.addTab("Cadastro/Alteração", jpCadastro);

        getContentPane().add(jtpTabela, java.awt.BorderLayout.CENTER);
        getContentPane().add(jpsStatusBar, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPesquisarActionPerformed
        List<Filtro> lFiltros = new LinkedList<>();
        lFiltros.add(cscFiltroLista.getFiltro("lista"));
        lFiltros.add(cscFiltroDescricao.getFiltro("descricao"));

        try {
            listaControl.pesquisar(lFiltros);
            otmConsultaLista.fireTableDataChanged();
        } catch (ErroSistemaException ex) {
            jpsStatusBar.setStatus("Erro ao pesquisar lista.", JPStatus.ERRO, ex);
        }
    }//GEN-LAST:event_jbPesquisarActionPerformed

    private void jbIncluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbIncluirActionPerformed
        listaControl.novo();
        otmItemLista.setData(listaControl.getLista().getItensLista());
        statusTela = INCLUINDO;
        habilitaComponentesCadastro(true);
        habilitaCadastro(true);
    }//GEN-LAST:event_jbIncluirActionPerformed

    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarActionPerformed
        try {
            if (statusTela == INCLUINDO || statusTela == ALTERANDO) {
                if (!validarListaCampos(listaCampoLista)) {
                    jpsStatusBar.setStatus("Campos obrigatórios não preenchidos.", JPStatus.ALERTA);
                    return;
                }

                setarDadosLista();

                listaControl.salvarAtualizar();

                otmConsultaLista.fireTableDataChanged();

                int posicaoLinha = listaControl.getlConsultaListas().indexOf(listaControl.getLista());
                tpConsultaListas.addRowSelectionInterval(tpConsultaListas.convertRowIndexToView(posicaoLinha), tpConsultaListas.convertRowIndexToView(posicaoLinha));
                tpConsultaListas.scrollRectToVisible(tpConsultaListas.getCellRect(tpConsultaListas.getSelectedRow(), 0, true));

                otmConsultaListaItem.setData(listaControl.getLista().getItensLista());
                tpConsultaItensLista.packAll();
            } else {
                setarDadosLista();

                listaControl.excluir();

                otmConsultaLista.fireTableDataChanged();
            }

            jpsStatusBar.setStatus("Processamento efetuado com sucesso.", JPStatus.NORMAL);
            habilitaCadastro(false);
            statusTela = INDEFINIDO;

        } catch (ErroSistemaException ex) {
            jpsStatusBar.setStatus("Erro ao realizar processamento.", JPStatus.ERRO, ex);
        }
    }//GEN-LAST:event_jbSalvarActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        habilitaCadastro(false);
        statusTela = INDEFINIDO;
    }//GEN-LAST:event_jbCancelarActionPerformed

    private void jbAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAlterarActionPerformed
        alterarLista();
    }//GEN-LAST:event_jbAlterarActionPerformed

    private void tpCadastroItensListaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tpCadastroItensListaKeyPressed
        // TODO add your handling code here:
        if (evt.getModifiers() == KeyEvent.CTRL_MASK) {
            if (evt.getKeyCode() == KeyEvent.VK_N) {

                //otmCadastroColuna.add(new Coluna(tabelaControl.getTabelaDigitada()));
                ListaItem itemLista = new ListaItem(listaControl.getLista());
                //itemLista.setLista(listaControl.getListaDigitada());

                OptionalInt oiProximaOrdem = listaControl.getLista().getItensLista().stream().mapToInt(il -> il.getOrdem()).max();

                itemLista.setOrdem(oiProximaOrdem.isPresent() ? oiProximaOrdem.getAsInt() + 1 : 1);

                listaControl.getLista().getItensLista().add(itemLista);
                otmItemLista.setData(listaControl.getLista().getItensLista());
                //tabelaControl.getListColunas().add(coluna);
                //cotmCadastroColunas.setData(data);

                tpCadastroItensLista.setRowSelectionInterval(tpCadastroItensLista.getRowCount() - 1, tpCadastroItensLista.getRowCount() - 1);
                tpCadastroItensLista.setColumnSelectionInterval(0, 0);

                //otmCadastroColuna.add(new Coluna(tabelaControl.getTabelaDigitada()));
//                // habilta selecao por coluna
//                jxtCadastroItensLista.setColumnSelectionAllowed(true);
//                // desabilita a selecao por linha
//                jxtCadastroItensLista.setRowSelectionAllowed(false);
//                // escolhe quais colunas quer selecionar
//                jxtCadastroItensLista.setColumnSelectionInterval(0, 0);
//jxtCadastroItensLista.editCellAt(jxtCadastroItensLista.getRowCount() - 1, 0);
//                for (Integer linhaSelecionada : jxtCadastroItensLista.getSelectedRows()) {
//                    jxtCadastroItensLista.removeRowSelectionInterval(linhaSelecionada, linhaSelecionada);
//                }
//                //jxtCadastroItensLista.addRowSelectionInterval(jxtCadastroItensLista.convertRowIndexToView(jxtCadastroItensLista.getRowCount()), jxtContasReceber.convertRowIndexToView(posicaoLinha));
//                jxtCadastroItensLista.addRowSelectionInterval(jxtCadastroItensLista.convertRowIndexToView(jxtCadastroItensLista.getRowCount() - 1), jxtCadastroItensLista.convertRowIndexToView(jxtCadastroItensLista.getRowCount() - 1));
//                jxtCadastroItensLista.scrollRectToVisible(jxtCadastroItensLista.getCellRect(jxtCadastroItensLista.getSelectedRow(), 0, true));
            }

            if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
                if (JOptionPane.showConfirmDialog(rootPane, "Confirma exclusão da lista?", "Confirma", JOptionPane.YES_NO_OPTION) == 0) {
                    otmItemLista.remove(tpCadastroItensLista.convertRowIndexToModel(tpCadastroItensLista.getSelectedRow()));
                }
            }

            if (evt.getKeyCode() == KeyEvent.VK_S) {

            }

            if (evt.getKeyCode() == KeyEvent.VK_D) {

            }

        }
    }//GEN-LAST:event_tpCadastroItensListaKeyPressed

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed
        if (tpConsultaListas.getSelectedRow() >= 0) {
            listaControl.setLista(listaControl.find(otmConsultaLista.getValue(tpConsultaListas.getLinhaSelecionada())));

            otmItemLista.setData(listaControl.getLista().getItensLista());

            habilitaComponentesCadastro(false);

            jbSalvar.setEnabled(true);
            jbCancelar.setEnabled(true);

            habilitaCadastro(true);

            statusTela = EXCLUINDO;
        } else {
            jpsStatusBar.setStatus("É necessário selecionar uma tabela.", JPStatus.ALERTA);
        }
    }//GEN-LAST:event_jbExcluirActionPerformed

    private void tpConsultaListasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tpConsultaListasMouseClicked
        if (evt.getClickCount() == 2) {
            alterarLista();
        }
    }//GEN-LAST:event_tpConsultaListasMouseClicked

    private void jbSubirMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSubirMenuActionPerformed
        if (tpCadastroItensLista.getLinhaSelecionada() >= 0) {
            int colunaSelecionada = tpCadastroItensLista.getSelectedColumn();
            ListaItem listaItemMover = otmItemLista.getValue(tpCadastroItensLista.convertRowIndexToModel(tpCadastroItensLista.getSelectedRow()));

            listaControl.movimentaOrdemListaItem(ListaControl.SUBIR, listaItemMover);

            otmItemLista.fireTableDataChanged();

            int linha = otmItemLista.indexOf(listaItemMover);
            tpCadastroItensLista.setRowSelectionInterval(tpCadastroItensLista.convertRowIndexToModel(linha), tpCadastroItensLista.convertRowIndexToModel(linha));
            tpCadastroItensLista.addColumnSelectionInterval(colunaSelecionada, colunaSelecionada);
        }
    }//GEN-LAST:event_jbSubirMenuActionPerformed

    private void jbDescerMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDescerMenuActionPerformed
        if (tpCadastroItensLista.getLinhaSelecionada() >= 0) {
            int colunaSelecionada = tpCadastroItensLista.getSelectedColumn();
            ListaItem listaItemMover = otmItemLista.getValue(tpCadastroItensLista.convertRowIndexToModel(tpCadastroItensLista.getSelectedRow()));

            listaControl.movimentaOrdemListaItem(ListaControl.BAIXAR, listaItemMover);

            otmItemLista.fireTableDataChanged();

            int linha = otmItemLista.indexOf(listaItemMover);
            tpCadastroItensLista.setRowSelectionInterval(tpCadastroItensLista.convertRowIndexToModel(linha), tpCadastroItensLista.convertRowIndexToModel(linha));
            tpCadastroItensLista.addColumnSelectionInterval(colunaSelecionada, colunaSelecionada);
        }

    }//GEN-LAST:event_jbDescerMenuActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private br.com.martinello.componentesbasicos.CampoString csDescricao;
    private br.com.martinello.componentesbasicos.CampoString csLista;
    private br.com.martinello.componentesbasicos.consulta.CampoStringConsulta cscFiltroDescricao;
    private br.com.martinello.componentesbasicos.consulta.CampoStringConsulta cscFiltroLista;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSplitPane jSplitPane;
    private br.com.martinello.componentesbasicos.Botao jbAlterar;
    private br.com.martinello.componentesbasicos.Botao jbCancelar;
    private br.com.martinello.componentesbasicos.Botao jbDescerMenu;
    private br.com.martinello.componentesbasicos.Botao jbExcluir;
    private br.com.martinello.componentesbasicos.Botao jbIncluir;
    private br.com.martinello.componentesbasicos.Botao jbPesquisar;
    private br.com.martinello.componentesbasicos.Botao jbSalvar;
    private br.com.martinello.componentesbasicos.Botao jbSubirMenu;
    private br.com.martinello.componentesbasicos.Rotulo jlFiltroDescricao;
    private br.com.martinello.componentesbasicos.Rotulo jlFiltroTabela;
    private javax.swing.JPanel jpCadastro;
    private javax.swing.JPanel jpConsulta;
    private javax.swing.JPanel jpFiltros;
    private br.com.martinello.componentesbasicos.paineis.JPStatus jpsStatusBar;
    private javax.swing.JScrollPane jspCadastroItensLista;
    private javax.swing.JScrollPane jspConsultaItensLista;
    private javax.swing.JScrollPane jspConsultaTabelas;
    private javax.swing.JTabbedPane jtpCadastro;
    private javax.swing.JTabbedPane jtpConsulta;
    private javax.swing.JTabbedPane jtpTabela;
    private br.com.martinello.componentesbasicos.paineis.Painel pBotoesListaItem;
    private br.com.martinello.componentesbasicos.paineis.Painel pListaItens;
    private br.com.martinello.componentesbasicos.Rotulo rDescricao;
    private br.com.martinello.componentesbasicos.Rotulo rLista;
    private br.com.martinello.componentesbasicos.TabelaPadrao tpCadastroItensLista;
    private br.com.martinello.componentesbasicos.TabelaPadrao tpConsultaItensLista;
    private br.com.martinello.componentesbasicos.TabelaPadrao tpConsultaListas;
    // End of variables declaration//GEN-END:variables

    @Override
    public void habilitaCadastro(boolean habilitada) {
        jtpTabela.setEnabledAt(0, !habilitada);
        jtpTabela.setEnabledAt(1, habilitada);
        jtpTabela.setSelectedIndex(habilitada ? 1 : 0);
    }

    @Override
    public void habilitaComponentesCadastro(boolean habilita) {
        habilitaPainel(habilita, jpCadastro);
        tpCadastroItensLista.setEnabled(habilita);
    }

    public ListaControl getListaControl() {
        return listaControl;
    }

    private void alterarLista() {
        if (tpConsultaListas.getSelectedRow() >= 0) {
            listaControl.setLista(listaControl.find(otmConsultaLista.getValue(tpConsultaListas.getLinhaSelecionada())));

            habilitaCadastro(true);

            carregarDadosLista();

            habilitaComponentesCadastro(true);
            habilitaCadastro(true);
            statusTela = ALTERANDO;
        } else {
            jpsStatusBar.setStatus("É necessário selecionar uma lista.", JPStatus.ALERTA);
        }
    }

    public void setarDadosLista() {
        listaControl.getLista().setDescricao(csDescricao.getString());
        listaControl.getLista().setLista(csLista.getString());
    }

    public void carregarDadosLista() {
        csDescricao.setString(listaControl.getLista().getDescricao());
        csLista.setString(listaControl.getLista().getLista());

        otmItemLista.setData(listaControl.getLista().getItensLista());
    }

}
