package br.com.martinello.matriz.util;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.ParameterizedType;import java.util.ArrayList;import java.util.List;import org.ksoap2.serialization.SoapObject;public class Deserilization {    @SuppressWarnings("unchecked")    public ArrayList SoapDeserializeArray(Class<?> itemClass, SoapObject object) {        ArrayList arrayList = new ArrayList();        for (int i = 0; i < object.getPropertyCount(); i++) {            try {                Object newObject = itemClass.getConstructor(SoapObject.class).newInstance(((SoapObject) object.getProperty(i)));                arrayList.add(newObject);            } catch (InstantiationException e) {                // TODO Auto-generated catch block                e.printStackTrace();            } catch (IllegalAccessException e) {                // TODO Auto-generated catch block                e.printStackTrace();            } catch (IllegalArgumentException e) {                // TODO Auto-generated catch block                e.printStackTrace();            } catch (InvocationTargetException e) {                // TODO Auto-generated catch block                e.printStackTrace();            } catch (NoSuchMethodException e) {                // TODO Auto-generated catch block                e.printStackTrace();            }        }        return arrayList;    }    public <T> void SoapDeserilize(T item, SoapObject object) {        Field[] fields = item.getClass().getDeclaredFields();        //Log.d("fieldsNum",Integer.toString(fields.length));        for (Field field : fields) {            try {                if (field.getType().getName() == String.class.getName()) {                    field.set(                            item, object.getProperty(field.getName()).toString()                    );                } else if (field.getType().getName() == Integer.class.getName() || field.getType().getName() == int.class.getName()) {                    field.set(                            item, Integer.parseInt(object.getProperty(field.getName()).toString())                    );                } else if (field.getType().getName() == Float.class.getName()) {                    field.set(                            item, Float.parseFloat(object.getProperty(field.getName()).toString())                    );                } else if (field.getType().getName() == Double.class.getName()) {                    field.set(                            item, Double.parseDouble(object.getProperty(field.getName()).toString())                    );                } else if (field.getType().getName() == Boolean.class.getName()) {                    field.set(                            item, Boolean.parseBoolean((object.getProperty(field.getName()).toString()))                    );                } else if (List.class.isAssignableFrom(field.getType())) {                    SoapObject fieldArray = (SoapObject) (object.getProperty(field.getName()));                    ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();                    Class genericClass = (Class) (parameterizedType.getActualTypeArguments()[0]);                    //声明Arraylist以备之后初始化传入参数                    ArrayList list = new ArrayList();                    for (int i = 0; i < fieldArray.getPropertyCount(); i++) {                        Object newObject = genericClass.getConstructor(SoapObject.class).newInstance((SoapObject) (fieldArray.getProperty(i)));                        list.add(newObject);                    }                    field.set(item, list);                } else {                    Class class1 = field.getType();                    Object newObject = class1.getConstructor(SoapObject.class).newInstance((SoapObject) (object.getProperty(field.getName())));                    field.set(item, newObject);                }            } catch (Exception e) {                e.printStackTrace();            }        }    }}